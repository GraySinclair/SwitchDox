[{"tag_name":"1.0","name":"First stable release - biggest update!","body":"# Dunno how to start? Read this!\r\n## ChangeLog of this huge version\r\n\r\n- UI improved:\r\n  - New dark blue theme, all graphics updated\r\n  - Main font changed from Tahoma to Roboto\r\n  - Use ZL and ZR to move between project blocks\r\n  - Use D-pad or joysticks to move between projects\r\n  - Select projects by A button or touching them\r\n  - Use L or R to display help\r\n  - Use + or - to exit to hbmenu\r\n- Brand, new remade API: (read documentation)\r\n  - Modules must be called by `require` function, Node-style\r\n  - Graphics module `gfx` replaced by `sdl`, now using SDL2 rendering\r\n  - System module `device` replaced by `nx`\r\n  - Global vars `__dirname` and `__filename` added (only if the source is loaded from a file)\r\n  - Some Node modules were partially added: `fs`, `os`, `path`, `process` (more will be added)\r\n  - New modules have been added, to port some basic C and C++ elements, which are `stdio` and `stdlib`.\r\n  - Within `sdl` module, audio support has been added because SDL2 supports audio: MP3, OGG, FLAC and WAV files can be played!\r\n  - More specific API stuff can be checked within the [documentation](https://brewjs.github.io)\r\n- Projects have also been changed:\r\n  - Now projects are identified by folders which have a `package.json` file inside, like Node and NPM do.\r\n  - Those JSON files should have this attributes: `name` (the project's name), `version` (the project's version), `description` (the project's description) and `main` (the entry source file to load, doesn't need to be `*.js` anymore).\r\n  - If the project doesn't have the JSON file, it won't be shown in the interpreter.\r\n- Can I use Brew.js API on my C/C++ homebrew app? Yes!\r\n  - Brew.js API's C++ core has been completely remade, so it can now be embedded with other C/C++ projects.\r\n  - IMPORTANT: You must have it's JS libraries stored somewhere, so that Brew.js accesses them. In this interpreter's case, they're stored inside RomFS (`\"romfs:/Lib\"`).\r\n  - Brew.js API searches there by default, so I recommend storing them there. Don't worry about RomFS, when Brew.js API is initialized it automatically enabled RomFS support, and disables it when it's exited.\r\n  - Brew.js API doesn't need a documentation, as it's main header (`\"Brew.js/Brew.js.h\"`) only has 4 functions: `Brew::Init(string Path)`, which initializes Brew.js API with given library path (`\"romfs:/Lib\"` by default); `Brew::Exit()`, which exits Brew.js API's services, `Brew::Evaluate(string Source)`, which evaluates JS source and returns the result as a string; and `Brew::EvaluateFile(string Path)`, which does the same as the previous function but from a source file, adding `__dirname` and `__filename` global vars. Enjoy embedding Brew.js API!\r\n- Yay, new examples!\r\n  - There are some new examples, as always, but this time there are even more. (audio player, simple notepad...)\r\n  - Obviously, all the examples have been updated to be useful with the new API.","assets":[{"size":4582438,"browser_download_url":"https://github.com/XorTroll/Brew.js/releases/download/1.0/Brew.js.nro"}]}]